(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{421:function(t,a,r){"use strict";r.r(a);var s=r(6),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"初始化参数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#初始化参数"}},[t._v("#")]),t._v(" 初始化参数")]),t._v(" "),r("p",[t._v("从配置文件和 Shell 语句中读取并合并参数，得出最终的配置参数。")]),t._v(" "),r("h1",{attrs:{id:"开始编译"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开始编译"}},[t._v("#")]),t._v(" 开始编译")]),t._v(" "),r("p",[t._v("从上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译。")]),t._v(" "),r("h1",{attrs:{id:"确定入口"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#确定入口"}},[t._v("#")]),t._v(" 确定入口")]),t._v(" "),r("p",[t._v("根据配置中的 entry 找出所有的入口文件。")]),t._v(" "),r("h1",{attrs:{id:"编译模块"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#编译模块"}},[t._v("#")]),t._v(" 编译模块")]),t._v(" "),r("p",[t._v("从入口文件出发，调用所有配置的 loader 对模块进行翻译，再找出该模块依赖的模块，这个步骤是递归执行的，直至所有入口依赖的模块文件都经过本步骤的处理。")]),t._v(" "),r("h1",{attrs:{id:"完成模块编译"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#完成模块编译"}},[t._v("#")]),t._v(" 完成模块编译")]),t._v(" "),r("p",[t._v("经过第 4 步使用 loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系。")]),t._v(" "),r("h1",{attrs:{id:"输出资源"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#输出资源"}},[t._v("#")]),t._v(" 输出资源")]),t._v(" "),r("p",[t._v("根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 chunk，再把每个 chunk 转换成一个单独的文件加入到输出列表，这一步是可以修改输出内容的最后机会。")]),t._v(" "),r("h1",{attrs:{id:"输出完成"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#输出完成"}},[t._v("#")]),t._v(" 输出完成")]),t._v(" "),r("p",[t._v("在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])])}),[],!1,null,null,null);a.default=e.exports}}]);