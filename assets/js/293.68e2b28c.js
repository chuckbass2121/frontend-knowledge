(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{535:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_12-道腾讯前端面试真题及答案整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-道腾讯前端面试真题及答案整理"}},[t._v("#")]),t._v(" 12 道腾讯前端面试真题及答案整理")]),t._v(" "),a("h2",{attrs:{id:"谈谈你对-dns-prefetch-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#谈谈你对-dns-prefetch-的理解"}},[t._v("#")]),t._v(" 谈谈你对 "),a("code",[t._v("dns-prefetch")]),t._v(" 的理解")]),t._v(" "),a("p",[t._v("DNS 是什么 —— Domain Name System，域名系统，作为域名和 IP 地址互相映射的一个分布式数据库。")]),t._v(" "),a("h3",{attrs:{id:"dns-prefetching"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dns-prefetching"}},[t._v("#")]),t._v(" DNS Prefetching")]),t._v(" "),a("p",[t._v("浏览器根据自定义的规则，提前去解析后面可能用到的域名，来加速网站的访问速度。简单来说就是提前解析域名，以免延迟。")]),t._v(" "),a("h3",{attrs:{id:"使用方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用方式"}},[t._v("#")]),t._v(" 使用方式")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("link")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("rel")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("dns-prefetch"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("href")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("//wq.test.com"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("p",[t._v("这个功能有个默认加载条件，所有的 a 标签的 href 都会自动去启用 DNS Prefetching，也就是说，你网页的 a 标签 href 带的域名，是不需要在 head 里面加上 link 手动设置的。但 a 标签的默认启动在 HTTPS 不起作用。")]),t._v(" "),a("p",[t._v("这时要使用 meta 里面 http-equiv 来强制启动功能。")]),t._v(" "),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("meta")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("http-equiv")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("x-dns-prefetch-control"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("content")]),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])]),a("h3",{attrs:{id:"总结一下"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结一下"}},[t._v("#")]),t._v(" 总结一下")]),t._v(" "),a("ol",[a("li",[t._v("DNS Prefetching 是提前加载域名解析的，省去了解析时间。a 标签的 href 时可以在 Chrome、Firefox 包括高版本的 IE，但是在 HTTPS 下不起作用，需要 meta 来强制开启功能；")]),t._v(" "),a("li",[t._v("这是 DNS 的提前解析，不是 css、js 等文件缓存，大家不要混淆两个不同的概念；")]),t._v(" "),a("li",[t._v("如果直接做了 js 的重定向，或者在服务端做了重定向，没有在 link 中手动设置，是不起作用的；")]),t._v(" "),a("li",[t._v("这个对淘宝这种网页中大量引用其他域名的资源的网站起的作用明显，如果你的所有资源都在你当前域名下，那基本不起作用。")])]),t._v(" "),a("h2",{attrs:{id:"get-post-请求参数长度有什么特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-post-请求参数长度有什么特点"}},[t._v("#")]),t._v(" get / post  请求参数长度有什么特点")]),t._v(" "),a("p",[t._v("我们经常说 get 请求参数的大小存在限制，而 post 请求的参数大小是无限制的。这是一个错误的说法，实际上 HTTP 协议上从未规定 GET / POST 请求的长度限制是多少。对 GET 请求参数的限制是来自于浏览器或 Web 服务器，浏览器和 Web 服务器限制了 URL 的长度。为了明确这个概念，我们必须再次强调一下几点：")]),t._v(" "),a("ol",[a("li",[t._v("HTTP 协议从未规定 GET 和 POST 请求的长度限制；")]),t._v(" "),a("li",[t._v("GET 的长度限制是因为浏览器和 Web 服务器限制了 URL 的长度；")]),t._v(" "),a("li",[t._v("不同的浏览器和 Web 服务器限制的最大长度是不一样的；")]),t._v(" "),a("li",[t._v("要支持 IE，则最大长度为 2084 byte；若只支持 Chrome，则最大长度 8182 byte。")])]),t._v(" "),a("h2",{attrs:{id:"前端需要注意哪些-seo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前端需要注意哪些-seo"}},[t._v("#")]),t._v(" 前端需要注意哪些 SEO")]),t._v(" "),a("ol",[a("li",[t._v("合理的 TDK（title、description、keywords）：搜索对三项的权重逐个减少。title 强调重点即可，重要关键词不要出现超过 2 次，而且要靠前；不同页面的 title 要有所不同；description 把页面内容高度概括，长度适合，不要过分堆砌关键词，不同页面的 description 有所不同；keywords 列举出重要关键词即可；")]),t._v(" "),a("li",[t._v("语义化 HTML 代码，符合 W3C 规范：语义化代码让搜索引擎容易理解网页；")]),t._v(" "),a("li",[t._v("重要内容 HTML 代码放最前面：搜索引擎抓取 HTML 顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取；")]),t._v(" "),a("li",[t._v("重要内容不要用 js 输出：爬虫不会执行 js 获取内容；")]),t._v(" "),a("li",[t._v("少用 iframe（搜索引擎不会抓取 iframe 中的内容）；")]),t._v(" "),a("li",[t._v("非装饰性图片必须加上 alt；")]),t._v(" "),a("li",[t._v("提高网站速度（网站速度是搜索引擎排序的一个重要指标）。")])]),t._v(" "),a("h2",{attrs:{id:"实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现一个页面操作不会整页刷新的网站-并且能在浏览器前进、后退时正确响应"}},[t._v("#")]),t._v(" 实现一个页面操作不会整页刷新的网站，并且能在浏览器前进、后退时正确响应")]),t._v(" "),a("p",[t._v("参考 react-router，实现思路是 hash 或者是 H5 的 history。")]),t._v(" "),a("h2",{attrs:{id:"如何优化-spa-应用的首屏加载速度慢的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何优化-spa-应用的首屏加载速度慢的问题"}},[t._v("#")]),t._v(" 如何优化 SPA 应用的首屏加载速度慢的问题")]),t._v(" "),a("p",[t._v("参考性能优化")]),t._v(" "),a("h2",{attrs:{id:"reflect-对象创建目的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reflect-对象创建目的"}},[t._v("#")]),t._v(" Reflect 对象创建目的")]),t._v(" "),a("ol",[a("li",[t._v("将 Object 对象的一些明显属于语言内部的方法（如："),a("code",[t._v("Object.defineProperty")]),t._v(" ，放到 Reflect对象上）；")]),t._v(" "),a("li",[t._v("修改某些 Object 方法的返回结果，让其变得更合理；")]),t._v(" "),a("li",[t._v("让 Objecty 操作都变成函数行为；")]),t._v(" "),a("li",[t._v("Reflect 对象的方法与 Proxy 对象的方法一一对应，只要是 Proxy 对象的方法，就能在 Reflect 对象上找到对应的方法。这就让 Proxy 对象可以方便地调用对应的 Reflect 方法，完成默认行为，作为修改行为的基础。")])]),t._v(" "),a("p",[t._v("也就是说，不管 Proxy 怎么修改默认行为，你总可以在 Reflect 上获取默认行为。")]),t._v(" "),a("h2",{attrs:{id:"内部属性-class-是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内部属性-class-是什么"}},[t._v("#")]),t._v(" 内部属性"),a("code",[t._v("[[Class]]")]),t._v(" 是什么")]),t._v(" "),a("p",[t._v('所有 typeof 返回值为 "object" 的对象（如数组）都包含一个内部属性 [[Class]]（我 们可以把它看作一个内部的分类，而非传统的面向对象意义上的类）。这个属性无法直接访问， 一般通过 Object.prototype.toString(..) 来查看。例如：')]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "[object Array]" ')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("regex-literal")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("i")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('//"[object RegExp]"')]),t._v("\n")])])]),a("p",[t._v("多数情况下，对象的内部[[class]]属性和创建该对象的内建原生构造函数相对应，不过也不总是这样。2.基本类型值的[[class]]属性")]),t._v(" "),a("p",[t._v("虽然Null()和Undefined()这样的原生构造函数并不存在，但是内部[[class]]属性仍然是“Null”和“Undefined”。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Null]")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Undefined]")]),t._v("\n")])])]),a("p",[t._v("其他基本类型值的情况有所不同：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object String]")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Number]")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[object Boolean]")]),t._v("\n")])])]),a("p",[t._v("基本类型值被各自的封装对象自动包装，所以他们的内部[[class]]属性分别为“String”，“Number”和“Boolean”。3.封装对象")]),t._v(" "),a("p",[t._v("由于基本类型值没有.length和.toString()这样的属性和方法，需要通过封装对象才能访问，此时Javascript引擎会自动为基本类型值包装一个封装对象。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//封装对象包装")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toUpperCase")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ```js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 一般不直接使用封装对象（即通过new操作创建基本类型值），优先考虑使用“abc”和“42”这样的基本类型值，而不是new String("abc") 和 new Number(42)。4.拆封')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果想要得到封装对象中的基本类型值，可以使用valueOf()函数。 ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ```js")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//封装对象的拆封")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" n "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"什么是堆-什么是栈-它们之间有什么区别和联系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是堆-什么是栈-它们之间有什么区别和联系"}},[t._v("#")]),t._v(" 什么是堆？什么是栈？它们之间有什么区别和联系？")]),t._v(" "),a("p",[t._v("堆和栈的概念存在于数据结构中和操作系统内存中。在数据结构中，栈中数据的存取方式为 "),a("strong",[t._v("先进后出")]),t._v(" ，而堆是一个优先队列，按优先级来进行排序，优先级可以按照大小来规定，完全二叉树是堆的一种实现方式。在操作系统中，内存被分为栈区和堆区，栈区内存由编译器自动分配释放，存放函数的参数值，局部变量的值等，其操作方式类似于数据结构中的栈。堆区内存一般由程序员分配释放，若程序员不释放，程序结束时可能有垃圾回收机制回收。")]),t._v(" "),a("h2",{attrs:{id:"isnan-和-number-isnan-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#isnan-和-number-isnan-的区别"}},[t._v("#")]),t._v(" isNaN 和 "),a("code",[t._v("Number.isNaN")]),t._v(" 的区别")]),t._v(" "),a("p",[t._v("函数 isNaN 在接收参数后，会尝试将这个参数转换为数值，任何不能被转换为数值的值都会返回 true，因此非数字传入也会返回 true，会影响 NaN 的判断。")]),t._v(" "),a("p",[t._v("函数 "),a("code",[t._v("Number.isNaN")]),t._v(" 会首先判断传入参数是否为数字，如果是数字在继续判断是否为 NaN，这种方法对 NaN 的判断更准确。")]),t._v(" "),a("h2",{attrs:{id:"什么情况下会发生布尔值的隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下会发生布尔值的隐式类型转换"}},[t._v("#")]),t._v(" 什么情况下会发生布尔值的隐式类型转换")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("if(...)")]),t._v(" 条件判断语句；")]),t._v(" "),a("li",[a("code",[t._v("for(...;...;...)")]),t._v(" 语句中的条件判断表达式（第二个）；")]),t._v(" "),a("li",[a("code",[t._v("while(...)")]),t._v(" 和 "),a("code",[t._v("do...while(...)")]),t._v(" 循环中的条件判断表达式；")]),t._v(" "),a("li",[t._v("三目运算中的条件判断表达式；")]),t._v(" "),a("li",[t._v("逻辑运算符 "),a("code",[t._v("||")]),t._v(" 和 "),a("code",[t._v("&&")]),t._v(" 左边的操作数。")])]),t._v(" "),a("h2",{attrs:{id:"undefined-和-undeclared-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#undefined-和-undeclared-的区别"}},[t._v("#")]),t._v(" undefined 和 undeclared 的区别")]),t._v(" "),a("p",[t._v("已在作用域中声明但还没有赋值的变量，是 undefined 的。相反，还没有在作用域中声明 过的变量，是 undeclared 的。")]),t._v(" "),a("p",[t._v('对于 undeclared 变量的引用，浏览器会报引用错误，如 ReferenceError: b is not defined 。但是我们可以使用 typeof 的安全防范机制来避免 报错，因为对于 undeclared（或者 not defined ）变量，typeof 会返回 "undefined"。')]),t._v(" "),a("h2",{attrs:{id:"如何封装一个-javascript-的类型判断函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何封装一个-javascript-的类型判断函数"}},[t._v("#")]),t._v(" 如何封装一个 JavaScript 的类型判断函数")])])}),[],!1,null,null,null);s.default=e.exports}}]);