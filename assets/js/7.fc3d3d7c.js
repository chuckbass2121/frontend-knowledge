(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{186:function(t,s,a){t.exports=a.p+"assets/img/offset.d6421d70.png"},187:function(t,s,a){t.exports=a.p+"assets/img/client.f5202027.png"},188:function(t,s,a){t.exports=a.p+"assets/img/scroll.63f17b6f.png"},189:function(t,s,a){t.exports=a.p+"assets/img/rect.28424e67.png"},270:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("p",[t._v("DOM2 和 DOM3 Core 模块的目标是扩展 DOM API，满足 XML 的所有需求并提供更好的错误处理和特性检测。")]),t._v(" "),n("h1",{attrs:{id:"获取、设置样式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#获取、设置样式"}},[t._v("#")]),t._v(" 获取、设置样式")]),t._v(" "),n("h2",{attrs:{id:"style-属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#style-属性"}},[t._v("#")]),t._v(" style 属性")]),t._v(" "),n("ol",[n("li",[t._v("可以通过 style 属性 获取、设置元素的样式信息，但不包含通过层叠机制从文档样式和外部样式中继承来的样式。")]),t._v(" "),n("li",[t._v("因为 CSS 属性名使用连字符表示法（用连字符分隔两个单词，如 background-image），\n所以在 JavaScript 中这些属性必须转换为驼峰大小写形式（如backgroundImage）")])]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myDiv "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myDiv"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置背景颜色")]),t._v("\nmyDiv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"red"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修改大小")]),t._v("\nmyDiv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"100px"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nmyDiv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"200px"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 设置边框")]),t._v("\nmyDiv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("style"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("border "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1px solid black"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),n("h2",{attrs:{id:"getcomputedstyle"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#getcomputedstyle"}},[t._v("#")]),t._v(" getComputedStyle()")]),t._v(" "),n("p",[t._v("为了解决style属性只能获得通过style设置的样式。")]),t._v(" "),n("ol",[n("li",[t._v("getComputedStyle()可以获得计算后的样式。")]),t._v(" "),n("li",[t._v("不能修改 getComputedStyle()方法返回的对象，只读的。")])]),t._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v('<!DOCTYPE html> \n<html> \n<head> \n <title>Computed Styles Example</title> \n <style type="text/css"> \n #myDiv { \n background-color: blue; \n width: 100px; \n height: 200px; \n } \n </style> \n</head> \n<body> \n <div id="myDiv" style="background-color: red; border: 1px solid black"></div> \n</body> \n</html>\n')])])]),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" myDiv "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"myDiv"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" computedStyle "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("defaultView"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getComputedStyle")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myDiv"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computedStyle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("backgroundColor"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "red" ')]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computedStyle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("width"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "100px" ')]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computedStyle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("height"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "200px" ')]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("computedStyle"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("border"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "1px solid black"（在某些浏览器中）')]),t._v("\n")])])]),n("h1",{attrs:{id:"元素尺寸"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元素尺寸"}},[t._v("#")]),t._v(" 元素尺寸")]),t._v(" "),n("h2",{attrs:{id:"偏移尺寸"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#偏移尺寸"}},[t._v("#")]),t._v(" 偏移尺寸")]),t._v(" "),n("p",[n("img",{attrs:{src:a(186),alt:"offset"}})]),t._v(" "),n("ul",[n("li",[t._v("offsetHeight，元素在垂直方向上占用的像素尺寸，包括它的高度、水平滚动条高度（如果可\n见）和上、下边框的高度。")]),t._v(" "),n("li",[t._v("offsetLeft，元素左边框外侧距离包含元素左边框内侧的像素数。")]),t._v(" "),n("li",[t._v("offsetTop，元素上边框外侧距离包含元素上边框内侧的像素数。")]),t._v(" "),n("li",[t._v("offsetWidth，元素在水平方向上占用的像素尺寸，包括它的宽度、垂直滚动条宽度（如果可\n见）和左、右边框的宽度。")]),t._v(" "),n("li",[t._v("其中，offsetLeft 和 offsetTop 是相对于包含元素的，包")])]),t._v(" "),n("h2",{attrs:{id:"客户端尺寸"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#客户端尺寸"}},[t._v("#")]),t._v(" 客户端尺寸")]),t._v(" "),n("p",[n("img",{attrs:{src:a(187),alt:"client"}}),t._v("\n元素的客户端尺寸（client dimensions）包含元素内容及其内边距所占用的空间。客户端尺寸只有两\n个相关属性：clientWidth 和 clientHeight。其中，clientWidth 是内容区宽度加左、右内边距宽\n度，clientHeight 是内容区高度加上、下内边距高度")]),t._v(" "),n("p",[t._v("客户端尺寸实际上就是元素内部的空间，因此不包含滚动条占用的空间。这两个属性最常用于确定\n浏览器视口尺寸，即检测 document.documentElement 的 clientWidth 和 clientHeight。这两个\n属性表示视口（<html>或<body>元素）的尺寸。")]),t._v(" "),n("h2",{attrs:{id:"滚动尺寸"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#滚动尺寸"}},[t._v("#")]),t._v(" 滚动尺寸")]),t._v(" "),n("p",[n("img",{attrs:{src:a(188),alt:""}})]),t._v(" "),n("ul",[n("li",[t._v("scrollHeight，没有滚动条出现时，元素内容的总高度。")]),t._v(" "),n("li",[t._v("scrollLeft，内容区左侧隐藏的像素数，设置这个属性可以改变元素的滚动位置。")]),t._v(" "),n("li",[t._v("scrollTop，内容区顶部隐藏的像素数，设置这个属性可以改变元素的滚动位置。")]),t._v(" "),n("li",[t._v("scrollWidth，没有滚动条出现时，元素内容的总宽度。")])]),t._v(" "),n("h2",{attrs:{id:"确定元素尺寸"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#确定元素尺寸"}},[t._v("#")]),t._v(" 确定元素尺寸")]),t._v(" "),n("p",[n("img",{attrs:{src:a(189),alt:""}}),t._v("\n浏览器在每个元素上都暴露了 getBoundingClientRect()方法，返回一个 DOMRect 对象，包含\n6 个属性：left、top、right、bottom、height 和 width。")])])}),[],!1,null,null,null);s.default=e.exports}}]);