(window.webpackJsonp=window.webpackJsonp||[]).push([[164],{393:function(t,s,a){"use strict";a.r(s);var e=a(6),n=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook"}},[t._v("#")]),t._v(" hook")]),t._v(" "),a("p",[t._v("函数组件中用来代替生命周期的函数。")]),t._v(" "),a("p",[t._v("以下生命周期没有对应的hook。")]),t._v(" "),a("ul",[a("li",[t._v("getDerivdStateFromProps()")]),t._v(" "),a("li",[t._v("getSnapShotBeforeUpdate()")]),t._v(" "),a("li",[t._v("getDerivdStateFromError()")]),t._v(" "),a("li",[t._v("componentDidCatch()")])]),t._v(" "),a("h2",{attrs:{id:"为什么需要-hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-hook"}},[t._v("#")]),t._v(" 为什么需要 hook")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("类组件中逻辑复用通常使用需要使用 HOC 或者 render props。\n但是  HOC 或者 render props 会增加不必要的DOM节点。")])]),t._v(" "),a("li",[a("p",[t._v("逻辑分散在各个生命周期函数中，比如事件的监听和取消。")])]),t._v(" "),a("li",[a("p",[t._v("this指向问题\n就是事件的handler中this问题。要么使用bind，要么使用public class field.")])])]),t._v(" "),a("h1",{attrs:{id:"usestate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usestate"}},[t._v("#")]),t._v(" useState()")]),t._v(" "),a("p",[t._v("用来代替 state 和 setState()")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const [state, setState] = useState(initialState | ()=>{} );\n")])])]),a("p",[a("strong",[t._v("参数")]),t._v("：")]),t._v(" "),a("p",[t._v("useState()可以传入默认值或者一个用来生成默认值的函数。")]),t._v(" "),a("p",[t._v("当传入函数时，这个函数只会执行一次。当默认值计算比较耗时时，建议使用。")]),t._v(" "),a("p",[a("strong",[t._v("返回值")]),t._v("：")]),t._v(" "),a("p",[t._v("第一个是初始值。")]),t._v(" "),a("p",[t._v("第二个是更新初始值的函数。这个更新函数和this.setState()的参数一样，\n可以传值或者函数。")]),t._v(" "),a("p",[a("strong",[t._v("什么时候使用函数")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("prevState")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" prevState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("ol",[a("li",[t._v("当更新state的值依赖上一次的state的值时。")]),t._v(" "),a("li",[t._v("当在setTimeout或在callback中调用setState()时。")])]),t._v(" "),a("h1",{attrs:{id:"useeffect"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useeffect"}},[t._v("#")]),t._v(" useEffect()")]),t._v(" "),a("p",[t._v("副作用，用来代替 componentDidMount, componentDidUpdate, componentWillUnmount.")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useEffect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 清除函数")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("参数")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("需要执行的函数()=>{}")])]),t._v(" "),a("li",[a("p",[t._v("重新运行的依赖")]),t._v(" "),a("ul",[a("li",[t._v("当不穿依赖时，在每次渲染都会运行。")]),t._v(" "),a("li",[t._v("当传入 []时，只在componentDidMount时运行。")]),t._v(" "),a("li",[t._v("当传入 [a,b,c]时，只在a或者b或者c变化时运行。")])])]),t._v(" "),a("li",[a("p",[t._v("如果执行函数中返回清除函数，清除函数会在组件重新渲染或者卸载时运行。")])])]),t._v(" "),a("h1",{attrs:{id:"memo-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#memo-api"}},[t._v("#")]),t._v(" Memo api")]),t._v(" "),a("p",[a("code",[t._v("Memo(fn)")]),t._v("\n只应用于函数组件，用来代替 shouldComponentUpdate()")]),t._v(" "),a("h1",{attrs:{id:"usememo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usememo"}},[t._v("#")]),t._v(" useMemo()")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[a("strong",[t._v("参数")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("需要执行的函数()=>{}")]),t._v(" "),a("li",[t._v("重新运行的依赖")])]),t._v(" "),a("p",[t._v("useMemo() 不是用来代替生命周期函数的。\n它的作用是性能优化的。比如优化耗时计算，传递函数给子组件。")]),t._v(" "),a("h1",{attrs:{id:"usecallback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecallback"}},[t._v("#")]),t._v(" useCallback()")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("等同于")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useMemo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("fn"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("deps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("都是用来性能优化的。当父组件传递 函数 给子组件时用。")]),t._v(" "),a("h1",{attrs:{id:"useref"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#useref"}},[t._v("#")]),t._v(" useRef()")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" refContainer "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("initialValue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("参数")]),t._v("：\ninitialValue")]),t._v(" "),a("p",[a("strong",[t._v("返回值")]),t._v("：")]),t._v(" "),a("p",[t._v("useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传入的参数（initialValue）。\n返回的 ref 对象在组件的整个生命周期内保持不变。")]),t._v(" "),a("p",[a("strong",[t._v("作用")]),t._v("：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("代替只能在类组件中使用的 React.createRef()。\n用来获取DOM元素。")])]),t._v(" "),a("li",[a("p",[t._v("用来保存多次渲染不变的变量，相当于实例字段。")])])]),t._v(" "),a("p",[t._v("不同于state的是，改变ref.current的值不会引起重新渲染。")]),t._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[t._v("实现 componentWillReceiveProps。也就是监控props的变化。")])]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useRef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("currentProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" currentProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prevProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("current "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" currentProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h1",{attrs:{id:"usecontext"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usecontext"}},[t._v("#")]),t._v(" useContext()")]),t._v(" "),a("h1",{attrs:{id:"usereducer"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#usereducer"}},[t._v("#")]),t._v(" useReducer()")]),t._v(" "),a("p",[t._v("和Redux中的reducer一样，不过Redux的reducer控制的是store中的state。\nuseReducer控制的是组件中的state。")]),t._v(" "),a("h1",{attrs:{id:"自定义hook"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义hook"}},[t._v("#")]),t._v(" 自定义hook")]),t._v(" "),a("ol",[a("li",[t._v("可以返回JSX")]),t._v(" "),a("li",[t._v("可以返回 [value, setValue] 等。")])]),t._v(" "),a("h1",{attrs:{id:"hook-规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hook-规则"}},[t._v("#")]),t._v(" hook 规则")]),t._v(" "),a("ol",[a("li",[t._v("只能在函数组件中使用")]),t._v(" "),a("li",[t._v("只能写在函数组件顶层，不能写在循环，if语句中。")]),t._v(" "),a("li",[t._v("自定义hook要以use开头")]),t._v(" "),a("li",[t._v("使用eslint-plugin-react-hooks检查")])]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('"eslintConfig": {\n    "extends": "react-app",\n    "plugins": [\n      "react-hooks"\n    ],\n    "rules": {\n      "react-hooks/rules-of-hooks": "error",\n      "react-hooks/exhaustive-deps": "warn"\n    }\n  },\n')])])])])}),[],!1,null,null,null);s.default=n.exports}}]);