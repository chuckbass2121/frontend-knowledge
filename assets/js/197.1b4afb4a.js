(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{401:function(t,s,a){"use strict";a.r(s);var n=a(6),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"react-理念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react-理念"}},[t._v("#")]),t._v(" React 理念")]),t._v(" "),a("p",[t._v("我们可以从 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/thinking-in-react.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官网"),a("OutboundLink")],1),t._v(" 看到 React 的理念：")]),t._v(" "),a("blockquote",[a("p",[t._v("我们认为，React 是用 JavaScript "),a("strong",[t._v("构建快速响应")]),t._v(" 的大型 Web 应用程序的首选方式。它在 Facebook 和 Instagram 上表现优秀。")])]),t._v(" "),a("p",[t._v("那么该如何理解 "),a("strong",[t._v("快速响应")]),t._v("？可以从两个角度来看：")]),t._v(" "),a("ul",[a("li",[t._v("速度快")]),t._v(" "),a("li",[t._v("响应自然")])]),t._v(" "),a("p",[t._v("React 是如何实现这两点的呢？")]),t._v(" "),a("h2",{attrs:{id:"理解-速度快"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-速度快"}},[t._v("#")]),t._v(" 理解 "),a("em",[t._v("速度快")])]),t._v(" "),a("p",[t._v("每当聊到一款前端框架，拉出来比比渲染速度成了老生常谈。")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://stefankrause.net/js-frameworks-benchmark8/table.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 提供了各种框架渲染速度的对比")])]),t._v(" "),a("p",[t._v("我们经常用的前端三大框架指 React、Vue 和 Angular。想比如使用模版语法的 Vue、Angular，使用原生js（JSX 是 js 的语法糖）开发 UI 的 React 在语法层面有更多的灵活性。")]),t._v(" "),a("p",[t._v("然而，高灵活性意味着高不确定性，考虑如下的 Vue 模版语句：")]),t._v(" "),a("div",{staticClass:"language-vue extra-class"},[a("pre",{pre:!0,attrs:{class:"language-vue"}},[a("code",[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("0"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("{{name}}"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("2"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("3"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("template")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),a("p",[t._v("当编译的时候，由于模版语法的约束，Vue 可以明确知道在 li 中，只有 name 是变量，这可以提供一些优化线索。")]),t._v(" "),a("p",[t._v("而在 React 中，以上代码可以写成如下 JSX：")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" children "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("li")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("children"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("ul")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("由于语法的灵活，在编译时无法区分可能变化的部分。所以在运行时，React 需要遍历每个 li，判断其数据是否更新。")]),t._v(" "),a("p",[t._v("基于以上原因，相比于 Vue、Angular，缺少编译时优化手段的 React 为了 "),a("strong",[t._v("速度快")]),t._v(" 需要在运行时做出更多努力。")]),t._v(" "),a("p",[t._v("比如：")]),t._v(" "),a("ul",[a("li",[t._v("使用 PureComponent 或 "),a("code",[t._v("React.memo")]),t._v(" 构建组件")]),t._v(" "),a("li",[t._v("使用 shouldComponentUpdate 生命周期钩子")]),t._v(" "),a("li",[t._v("渲染列表时使用 key")]),t._v(" "),a("li",[t._v("使用 useCallback 和 useMemo 缓存函数和变量")])]),t._v(" "),a("p",[t._v("由开发者显式告诉 React 哪些组件不需要重复计算、可以复用。")]),t._v(" "),a("h2",{attrs:{id:"理解-响应自然"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#理解-响应自然"}},[t._v("#")]),t._v(" 理解 "),a("em",[t._v("响应自然")])]),t._v(" "),a("p",[t._v("该如何理解 "),a("em",[t._v("响应自然")]),t._v("？React给出的答案是 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/concurrent-mode-intro.html#putting-research-into-production",target:"_blank",rel:"noopener noreferrer"}},[t._v("将人机交互研究的结果整合到真实的 UI 中"),a("OutboundLink")],1),t._v(" 。")]),t._v(" "),a("p",[t._v("设想以下场景：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://react.iamkasong.com/img/searchbox.gif",alt:"搜索框"}})]),t._v(" "),a("p",[t._v("有一个地址搜索框，在输入字符时会实时显示地址匹配结果。")]),t._v(" "),a("p",[t._v("当用户输入过快时，在输入字符时可能会变得不是那么流畅。这是由于下拉列表的更新会阻塞线程，我们一般是通过 "),a("strong",[t._v("防抖")]),t._v(" 或 "),a("strong",[t._v("节流")]),t._v(" 来减少输入内容时触发回调的次数来解决这个问题。")]),t._v(" "),a("p",[t._v("但这只是治标不治本，只要组件更新操作是同步的，那么当更新开始到渲染完毕前，组件中总会有一定数量的工作占用线程，浏览器没有空闲时间绘制 UI，造成卡顿。")]),t._v(" "),a("blockquote",[a("p",[t._v("React核心团队成员Dan在介绍React为什么会异步（"),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/concurrent-mode-intro.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Concurrent Mode"),a("OutboundLink")],1),t._v("）更新组件时说：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://react.iamkasong.com/img/update.png",alt:"Dan关于用户体验的思考"}})])]),t._v(" "),a("p",[t._v("让我们从 "),a("em",[t._v("响应自然")]),t._v(" 的角度考虑：当输入字符时，用户是否在意下拉框能一瞬间更新？")]),t._v(" "),a("p",[t._v("事实是：并不在意。")]),t._v(" "),a("p",[t._v("如果我们能稍稍延迟下拉更新的时间，为浏览器留出时间渲染 UI，让输入不卡顿。这样的体验是 "),a("strong",[t._v("更自然的")]),t._v("。")]),t._v(" "),a("p",[t._v("为了实现这个目标，需要将 "),a("strong",[t._v("同步的更新")]),t._v(" 变为 "),a("strong",[t._v("可中断的异步更新")]),t._v("。")]),t._v(" "),a("p",[t._v("在浏览器每一帧的时间中，预留一些时间给JS线程，React 利用这部分时间更新组件（可以看到，在源码中预留的初始时间是 5ms）。")]),t._v(" "),a("p",[t._v("当预留时间不够用时，React 将线程控制权交还给浏览器时期有时间渲染 UI，React 则等待下一帧时间到来继续被中断的工作。")]),t._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),a("p",[t._v("通过以上内容，我们可以看到 React 为了践行 "),a("strong",[t._v("构建快速响应的大型 Web 应用程序")]),t._v(" 理念做出努力。")]),t._v(" "),a("p",[t._v("这些优化手段可以在现有架构上增加，而有些（如：异步可中断更新）只能重构整个架构去实现。")]),t._v(" "),a("p",[t._v("最后再让我们看看，Dan回答网友关于"),a("code",[t._v("React")]),t._v("发展方向的提问：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://react.iamkasong.com/img/ques1.png",alt:"用户向Dan提问"}}),t._v(" "),a("img",{attrs:{src:"https://react.iamkasong.com/img/ans1.png",alt:"Dan回答"}})]),t._v(" "),a("p",[t._v("相比于新增 feature，React 更在意底层抽象的表现力。结合理念，相信你已经明白这意味着什么了。")]),t._v(" "),a("h1",{attrs:{id:"旧版-react-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#旧版-react-架构"}},[t._v("#")]),t._v(" 旧版 React 架构")]),t._v(" "),a("p",[t._v("React15 架构可以分成两层：")]),t._v(" "),a("ul",[a("li",[t._v("Reconciler（协调器）：负责找出变化的组件")]),t._v(" "),a("li",[t._v("Renderer（渲染器）：入则将变化的组件渲染到页面上")])]),t._v(" "),a("h2",{attrs:{id:"react15架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react15架构"}},[t._v("#")]),t._v(" React15架构")]),t._v(" "),a("h3",{attrs:{id:"reconciler-协调器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-协调器"}},[t._v("#")]),t._v(" Reconciler（协调器）")]),t._v(" "),a("p",[t._v("我们知道，在 React 中可以通过 "),a("code",[t._v("this.setState")]),t._v("、"),a("code",[t._v("this.forceUpdate")]),t._v("、"),a("code",[t._v("ReactDOM.render")]),t._v(" 等 API 触发更新。")]),t._v(" "),a("p",[t._v("每当有更新发生时，Reconciler 会做如下工作：")]),t._v(" "),a("ol",[a("li",[t._v("调用函数组件、class组件的 render 方法，将返回的 JSX 转化为虚拟DOM；")]),t._v(" "),a("li",[t._v("将虚拟DOM和上次更新时的虚拟DOM对比；")]),t._v(" "),a("li",[t._v("通过对比找出本次更新中变化的虚拟DOM；")]),t._v(" "),a("li",[t._v("通知 Renderer 将变化的虚拟DOM渲染到页面上。")])]),t._v(" "),a("blockquote",[a("p",[t._v("你可以在 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#reconcilers",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 看到"),a("code",[t._v("React")]),t._v("官方对"),a("strong",[t._v("Reconciler")]),t._v("的解释")])]),t._v(" "),a("h3",{attrs:{id:"renderer-渲染器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renderer-渲染器"}},[t._v("#")]),t._v(" Renderer（渲染器）")]),t._v(" "),a("p",[t._v("由于 React 支持跨平台，所以不同平台有不同的 Renderer。我们前端最熟悉的是负责在浏览器环境渲染的 Renderer -- "),a("a",{attrs:{href:"https://www.npmjs.com/package/react-dom",target:"_blank",rel:"noopener noreferrer"}},[t._v("ReactDOM"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("除此之外，还有：")]),t._v(" "),a("ul",[a("li",[t._v("ReactNative 渲染器：渲染原生 App 组件；")]),t._v(" "),a("li",[t._v("ReactTest 渲染器：渲染出纯js对象用于测试；")]),t._v(" "),a("li",[t._v("ReactArt 渲染器：渲染到 Canvas、SVG 或 VML（IE8）。")])]),t._v(" "),a("p",[t._v("在每次更新发生时，Renderer 接到 Reconciler 通知，将变化的组件渲染在当前宿主环境。")]),t._v(" "),a("blockquote",[a("p",[t._v("你可以在 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#renderers",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 看到"),a("code",[t._v("React")]),t._v("官方对"),a("strong",[t._v("Renderer")]),t._v("的解释")])]),t._v(" "),a("h2",{attrs:{id:"react15架构的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#react15架构的缺点"}},[t._v("#")]),t._v(" React15架构的缺点")]),t._v(" "),a("p",[t._v("在 Reconciler 中，mount 的组件会调用 mountComponent，update 的组件会调用 updateComponent，这两个方法都会递归更新子组件。")]),t._v(" "),a("h3",{attrs:{id:"递归更新的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归更新的缺点"}},[t._v("#")]),t._v(" 递归更新的缺点")]),t._v(" "),a("p",[t._v("主流的浏览器刷新频率为 60HZ，即每（1000ms / 60HZ）16.6ms 浏览器刷新一次。我们知道，JS 可以操作 DOM，GUI渲染线程和 JS线程是互斥的。所以 "),a("strong",[t._v("JS脚本执行")]),t._v(" 和 "),a("strong",[t._v("浏览器布局、绘制")]),t._v(" 是不能同时执行的。")]),t._v(" "),a("p",[t._v("在每 16.6ms 时间内，需要完成以下工作：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// JS脚本执行 ------ 样式布局 ------ 样式绘制 ")]),t._v("\n")])])]),a("p",[t._v("当 JS 执行时间过长，超出了 16.6ms，这次刷新就没有时间执行 "),a("strong",[t._v("样式布局")]),t._v(" 和 "),a("strong",[t._v("样式绘制")]),t._v(" 了。")]),t._v(" "),a("p",[t._v("对于用户在输入框输入内容这种行为来说，就体现为按下了键盘按键但是页面上不实时显示输入。")]),t._v(" "),a("p",[t._v("对于 React 的更新来说，由于递归执行，所以更新一旦开始，中途就无法中断。当层级很深时，递归更新时间超过 16ms，用户交互就会卡顿。")]),t._v(" "),a("p",[t._v("在上一节中，我们已经提出了解决方案："),a("strong",[t._v("用中断的异步更新代替同步更新")]),t._v("。那么，React15的架构支持异步更新吗？")]),t._v(" "),a("p",[t._v("我用红色标注了更新的步骤。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200911221346.png",alt:""}})]),t._v(" "),a("p",[t._v("我们可以看到，Reconciler 和 Renderer 交替工作，当第一个 li 在页面上已经变化后，第二个 li 再进入 Reconciler。")]),t._v(" "),a("p",[t._v("由于整个过程都是同步的，所以在用户看来所有 DOM 是同步更新的。")]),t._v(" "),a("p",[t._v("让我们看看在 React15 架构中如果中途中断更新会怎么样？")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200911221818.png",alt:""}})]),t._v(" "),a("p",[t._v("当第一个 li 完成更新时中断更新，即步骤3完成后中断更新，此时后面的步骤都还未执行。")]),t._v(" "),a("p",[t._v("用户本来期望 123 变为 245，实际却看到的是更新不完全的 DOM（223）。")]),t._v(" "),a("p",[t._v("基于这个原因，React 决定重写整个架构。")]),t._v(" "),a("h1",{attrs:{id:"新版-react-架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#新版-react-架构"}},[t._v("#")]),t._v(" 新版 React 架构")]),t._v(" "),a("p",[t._v("React16架构可以分为三层：")]),t._v(" "),a("ul",[a("li",[t._v("Scheduler（调度器）：调度任务的优先级，高优先级先进入 Reconciler")]),t._v(" "),a("li",[t._v("Reconciler（协调器）：负责找出变化的组件")]),t._v(" "),a("li",[t._v("Renderer（渲染器）：负责将变化的组件渲染到页面上")])]),t._v(" "),a("p",[t._v("可以看到，对比 React15，React16中新增了 "),a("strong",[t._v("Scheduler（调度器）")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"scheduler-调度器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler-调度器"}},[t._v("#")]),t._v(" Scheduler（调度器）")]),t._v(" "),a("p",[t._v("既然我们以浏览器是否有剩余时间作为任务中断的标准，那么我们需要一种机制，当浏览器有剩余时间是通知我们。")]),t._v(" "),a("p",[t._v("其实部分浏览器已经实现了这个 API，这就是 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Window/requestIdleCallback",target:"_blank",rel:"noopener noreferrer"}},[t._v("requestIdleCallback"),a("OutboundLink")],1),t._v(" 。但由于以下因素，React 放弃使用：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器兼容性")]),t._v(" "),a("li",[t._v("触发频率不稳定，受很多因素影响。比如当我们浏览器切换 tab 后，之前 tab 注册的 requestIdleCallback 出发的频率会变得很低")])]),t._v(" "),a("p",[t._v("基于以上原因，React 决定实现功能更完备的 requestIdleCallback polyfill，这就是 "),a("strong",[t._v("Scheduler")]),t._v("。除了在空闲时触发回调的功能外，Scheduler 还提供了多种调度优先级供任务设置。")]),t._v(" "),a("blockquote",[a("p",[a("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/scheduler/README.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scheduler"),a("OutboundLink")],1),t._v(" 是独立于"),a("code",[t._v("React")]),t._v("的库")])]),t._v(" "),a("h2",{attrs:{id:"reconciler-协调器-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reconciler-协调器-2"}},[t._v("#")]),t._v(" Reconciler（协调器）")]),t._v(" "),a("p",[t._v("我们知道，在 React15 中 Reconciler 是递归处理虚拟DOM的，那我们看看React16的 Reconciler。")]),t._v(" "),a("p",[t._v("我们可以看见，更新工作从递归变成了可以中断的循环过程。每次循环都会调用 shouldYield 判断当前是否有剩余时间。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** @noinline */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("workLoopConcurrent")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Perform work until Scheduler asks us to yield")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("shouldYield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    workInProgress "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("performUnitOfWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("workInProgress"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("那么React16是如何解决中断更新时 DOM 渲染不完全的问题呢？")]),t._v(" "),a("p",[t._v("在 React 中，Reconciler 和 Renderer 不再是交替工作。当 Scheduler 将任务交给 Reconciler 后，Reconciler 会将变化的虚拟DOM打上代表增 / 删 / 更新的标记，类似这样：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Placement "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*             */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000010")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Update "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*                */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" PlacementAndUpdate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*    */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000000110")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Deletion "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*              */")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0b0000000001000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("全部的标记见 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactSideEffectTags.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("整个 Scheduler 与 Reconciler 的工作都在内存中进行。只有当所有组件都完成 Reconciler 的工作，才会统一交给 Renderer/")]),t._v(" "),a("blockquote",[a("p",[t._v("你可以在 "),a("a",{attrs:{href:"https://zh-hans.reactjs.org/docs/codebase-overview.html#fiber-reconciler",target:"_blank",rel:"noopener noreferrer"}},[t._v("这里"),a("OutboundLink")],1),t._v(" 看到 React 官方对React16新"),a("strong",[t._v("Reconciler")]),t._v("的解释")])]),t._v(" "),a("h2",{attrs:{id:"renderer-渲染器-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#renderer-渲染器-2"}},[t._v("#")]),t._v(" Renderer（渲染器）")]),t._v(" "),a("p",[t._v("Renderer 根据 Reconciler 为虚拟DOM打的标记，同步执行对应的 DOM 操作。")]),t._v(" "),a("p",[t._v("在 React16 架构中整个更新流程为：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200912095755.png",alt:""}})]),t._v(" "),a("p",[t._v("其中红框中的步骤随时可能由以下的原因被中断：")]),t._v(" "),a("ul",[a("li",[t._v("有其他更高优先级的任务需要先执行")]),t._v(" "),a("li",[t._v("当前帧每有剩余时间")])]),t._v(" "),a("p",[t._v("由于红框中的工作都在内存中进行，不会更新页面上的 DOM，所以即使反复中断，用户也不会看见更新不完全的 DOM。")]),t._v(" "),a("blockquote",[a("p",[t._v("事实上，由于 "),a("strong",[t._v("Scheduler")]),t._v(" 和 "),a("strong",[t._v("Reconciler")]),t._v(" 都是平台无关的，所以 React 为他们单独发了一个包 "),a("a",{attrs:{href:"https://www.npmjs.com/package/react-reconciler",target:"_blank",rel:"noopener noreferrer"}},[t._v("react-reconciler"),a("OutboundLink")],1),t._v(" 。你可以用这个包自己实现一个 ReactDOM。")])]),t._v(" "),a("h1",{attrs:{id:"fiber架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber架构"}},[t._v("#")]),t._v(" Fiber架构")]),t._v(" "),a("h2",{attrs:{id:"心智模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#心智模型"}},[t._v("#")]),t._v(" 心智模型")]),t._v(" "),a("p",[t._v("React 核心团队成员 "),a("a",{attrs:{href:"https://github.com/sebmarkbage/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Sebastian Markbåge"),a("OutboundLink")],1),t._v(" （React Hooks 的发明者）曾说过：“我们在 React 中做的就是践行 "),a("strong",[t._v("代数效应（Algebraic Effects）")]),t._v("。”")]),t._v(" "),a("p",[t._v("那么，什么是代数效应？它和 React 有什么关系呢？")]),t._v(" "),a("h3",{attrs:{id:"什么是代数效应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是代数效应"}},[t._v("#")]),t._v(" 什么是代数效应")]),t._v(" "),a("p",[t._v("代数效应是函数式编程的一个概念，用于将副作用从函数调用中分离。")]),t._v(" "),a("p",[t._v("接下来我们用伪代码来解释。")]),t._v(" "),a("p",[t._v("假设我们有一个函数 getTotalPicNum，传入 2个用户名称后，分别查找该用户在平台保存的图片数量，最后将图片数量相加后返回。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("user1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" picNum1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" picNum2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("在 getTotalPicNum 中，我们不关注 getPicNum 的实现，只在乎 "),a("strong",[t._v("获取到两个数字后将他们想家的结果的返回")]),t._v(" 这一过程。")]),t._v(" "),a("p",[t._v("接下来我们来实现 getPicNum。")]),t._v(" "),a("p",[a("em",[t._v("用户在平台保存的图片数量")]),t._v(" 是保存在服务器中的，所以为了获取该值，我们需要发起异步请求。")]),t._v(" "),a("p",[t._v("为了尽量保持 getTotalPicNum 的调用方式不变，我们首先想到使用 "),a("code",[t._v("async / awiat")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("user1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" user2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" num2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" picNum1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" picNum2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("但是 "),a("code",[t._v("async / await")]),t._v(" 是有 "),a("strong",[t._v("传染性")]),t._v(" 的：当一个函数变为 async 后，这意味着调用它的函数也需要变为 async，这就破坏了 getTotalPicNum 的同步特性。")]),t._v(" "),a("p",[t._v("有没有什么办法可以保持 getTotalNum 保持现有调用方式不变的情况下实现异步请求呢？")]),t._v(" "),a("p",[t._v("没有，不过我们可以 "),a("strong",[t._v("虚构")]),t._v(" 一个。")]),t._v(" "),a("p",[t._v("我们虚构一个类似于 "),a("strong",[t._v("try...catch")]),t._v(" 的语法 "),a("strong",[t._v("try...handle")]),t._v(" 与两个操作符 "),a("code",[t._v("perform")]),t._v("、"),a("code",[t._v("resume")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" picNum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" perform name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" picNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTotalPicNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kaSong'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoMing'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("handle")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("who")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("who"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'kaSong'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      resume "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("230")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xiaoMing'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      resume "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("122")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("\n      resume "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("当执行到 getTotalPicNum 内部的 getPicNum 方法时，会执行 "),a("code",[t._v("perform name")]),t._v("。")]),t._v(" "),a("p",[t._v("此时函数调用栈会从 getPicNum 方法内跳出，被最近一个 "),a("code",[t._v("try...handle")]),t._v(" 捕获。类似 "),a("code",[t._v("throw Error")]),t._v(" 后被最近一个 "),a("code",[t._v("try...catch")]),t._v(" 捕获。")]),t._v(" "),a("p",[t._v("类似于 "),a("code",[t._v("throw Error")]),t._v(" 后 Error 会作为 catch 的参数，"),a("code",[t._v("perform name")]),t._v(" 后 name 会作为 handle 的参数。")]),t._v(" "),a("p",[t._v("但与 "),a("code",[t._v("try...catch")]),t._v(" 最大的不同在于：当 Error 被 catch 捕获后，之前的调用栈就被销毁了。而 handle 执行 resume 后会回到之前 perform 的调用栈。")]),t._v(" "),a("p",[t._v("对于 "),a("code",[t._v("case 'kaSong'")]),t._v("，执行完 "),a("code",[t._v("resume with 230;")]),t._v(" 后调用栈会回到 "),a("code",[t._v("getPicNum")]),t._v("，此时"),a("code",[t._v("picNum === 230")])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("注意")])]),t._v(" "),a("p",[t._v("再次申明，"),a("code",[t._v("try...handle")]),t._v(" 的语法是虚构的，只是为了演示 "),a("code",[t._v("代数效应")]),t._v(" 的思想。")])]),t._v(" "),a("p",[t._v("总结一下："),a("strong",[t._v("代数效应")]),t._v(" 能够将 "),a("strong",[t._v("副作用")]),t._v("（例子中为 "),a("code",[t._v("请求图片数量")]),t._v("）从函数逻辑中分离，使函数关注点保持纯粹。")]),t._v(" "),a("p",[t._v("并且，从例子中可以看出，"),a("strong",[t._v("perform resume")]),t._v(" 不需要区分同步异步。")]),t._v(" "),a("h3",{attrs:{id:"代数效应在-react-中的应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代数效应在-react-中的应用"}},[t._v("#")]),t._v(" 代数效应在 React 中的应用")]),t._v(" "),a("p",[t._v("那么 "),a("strong",[t._v("代数效应")]),t._v(" 与 "),a("strong",[t._v("React")]),t._v(" 有什么关系呢？最明显的例子就是 "),a("strong",[t._v("Hooks")]),t._v("。")]),t._v(" "),a("p",[t._v("对于类似 "),a("code",[t._v("useState")]),t._v("、"),a("code",[t._v("useReducer")]),t._v("、"),a("code",[t._v("useRef")]),t._v(" 这样的 Hook，我们不需要关注函数组件的 state 在 Hook 中是如何保存的，React 会为我们处理。")]),t._v(" "),a("p",[t._v("我们只需要假设 useState 返回的是我们想要的 state，并编写业务逻辑就行。")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" updateNum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("button")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onClick")]),a("span",{pre:!0,attrs:{class:"token script language-javascript"}},[a("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("updateNum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("num")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("button")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("  \n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("如果这个例子还不够明显，可以看看官方的 "),a("a",{attrs:{href:"https://codesandbox.io/s/frosty-hermann-bztrp?file=/src/index.js:152-160",target:"_blank",rel:"noopener noreferrer"}},[t._v("Suspense Demo"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("在 Demo 中 "),a("code",[t._v("ProfileDetails")]),t._v(" 用于展示 "),a("code",[t._v("用户名称")]),t._v("。而 "),a("code",[t._v("用户名称")]),t._v(" 是 "),a("code",[t._v("异步请求")]),t._v(" 的。")]),t._v(" "),a("p",[t._v("但是 "),a("code",[t._v("Demo")]),t._v(" 中完全是 "),a("code",[t._v("同步")]),t._v(" 的写法。")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ProfileDetails")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" user "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" resource"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("read")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("user"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"代数效应与-generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代数效应与-generator"}},[t._v("#")]),t._v(" 代数效应与 Generator")]),t._v(" "),a("p",[t._v("从 React15 到 React16，协调器（Reconciler）重构的一大目的是：将老的同步更新的架构变为 "),a("strong",[t._v("异步可中断更新")]),t._v("。")]),t._v(" "),a("p",[t._v("异步可中断更新可以理解为：更新在执行过程中可能会被打断（浏览器时间分片用尽或有更高优先级任务插队），当可以继续执行时恢复之前执行的中间状态。")]),t._v(" "),a("p",[t._v("这就是代数效应中 "),a("code",[t._v("try...handle")]),t._v(" 的作用。")]),t._v(" "),a("p",[t._v("其实浏览器原生就支持类似的实现，这就是 Generator。")]),t._v(" "),a("p",[t._v("但是 Generator 的一些缺陷使 React 团队放弃了它：")]),t._v(" "),a("ul",[a("li",[t._v("类似 async、Generator 也是具有传染性的，使用了 Generator 则上下文的其他函数也需要做出改变，这样心智负担比较重；")]),t._v(" "),a("li",[t._v("Generator 执行的 "),a("strong",[t._v("中间状态")]),t._v(" 是上下文关联的。")])]),t._v(" "),a("p",[t._v("考虑如下例子：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doWork")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doExpensiveWorkA")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doExpensiveWorkB")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" z "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" y "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("doExpensiveWorkC")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("每当浏览器有空闲时间都会一次执行其中一个 doExpensiveWork，当时间用尽则会中断，当再次恢复时会从中断位置继续执行。")]),t._v(" "),a("p",[t._v("只考虑 "),a("em",[t._v("单一优先级任务的中断和继续")]),t._v(" 情况下，Generator 可以很好的实现异步可中断更新。")]),t._v(" "),a("p",[t._v("但是当我们考虑到 "),a("em",[t._v("高优先级任务插队")]),t._v(" 的情况，如果此时已经完成 doExpensiveWorkA 与 doExpensiveWorkB 计算出 x 与 y。")]),t._v(" "),a("p",[t._v("此时 B 组件接收到一个高优先级更新，由于 Generator 执行的中间状态是上下文关联的，所以计算 y 时无法复用之前已经计算出的 x，需要重新计算。")]),t._v(" "),a("p",[t._v("如果通过全局变量保存之前执行的中间状态，又会引入新的复杂度。")]),t._v(" "),a("blockquote",[a("p",[t._v("更详细的解释可以参考 "),a("a",{attrs:{href:"https://github.com/facebook/react/issues/7942#issuecomment-254987818",target:"_blank",rel:"noopener noreferrer"}},[t._v("这个issue"),a("OutboundLink")],1)])]),t._v(" "),a("p",[t._v("基于这些原因，React 没有采用 Generator 实现协调器。")]),t._v(" "),a("h2",{attrs:{id:"实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),a("p",[t._v("在新的架构中，我们提到的虚拟DOM在 React 中有一个正式的称呼：Fiber，所以后续文章会用 Fiber 替代 React16 虚拟DOM。")]),t._v(" "),a("h3",{attrs:{id:"fiber-的含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-的含义"}},[t._v("#")]),t._v(" Fiber 的含义")]),t._v(" "),a("p",[t._v("Fiber 的含义包含三层：")]),t._v(" "),a("ol",[a("li",[t._v("作为架构来说，之前 React15 的 Reconciler 采用递归的方式执行，数据保存在递归调用栈中，所以被称为 "),a("strong",[t._v("Stack Reconciler")]),t._v("。React16 的 Reconciler 基于 Fiber Node 实现，被称为 "),a("strong",[t._v("Fiber Reconciler")]),t._v("。")]),t._v(" "),a("li",[t._v("作为静态的数据结构来说，每个 Fiber 节点对应一个 React Element，保存了该组件的类型（函数组件/类组件/原生组件）、对应的 DOM 节点信息。")]),t._v(" "),a("li",[t._v("作为动态的工作单元，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作（需要被删除、被插入页面中、被更新...）。")])]),t._v(" "),a("h3",{attrs:{id:"fiber-的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fiber-的结构"}},[t._v("#")]),t._v(" Fiber 的结构")]),t._v(" "),a("p",[t._v("我们可以从这里看到 "),a("a",{attrs:{href:"https://github.com/facebook/react/blob/1fb18e22ae66fdb1dc127347e169e73948778e5a/packages/react-reconciler/src/ReactFiber.new.js#L117",target:"_blank",rel:"noopener noreferrer"}},[t._v("Fiber节点的属性定义"),a("OutboundLink")],1),t._v(" 。虽然属性很多，但我们可以按三层含义将他们分类来看：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("FiberNode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("tag"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" WorkTag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  pendingProps"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" mixed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mode"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" TypeOfMode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为静态数据结构的属性")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 用于连接其他Fiber节点形成Fiber树")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("index "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ref "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 作为动态的工作单元的属性")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度优先级相关")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childLanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向该fiber在另一次更新时对应的fiber")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("alternate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h4",{attrs:{id:"作为架构来说"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为架构来说"}},[t._v("#")]),t._v(" 作为架构来说")]),t._v(" "),a("p",[t._v("每个 Fiber 节点都有个对应的 React Element，多个 Fiber 节点是如何连接形成树呢？靠如下三个属性：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向父级Fiber节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("return "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向子Fiber节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("child "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指向右边第一个兄弟Fiber节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sibling "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("举个例子，如下的组件结构：")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n      i am\n      ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("KaSong")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("span")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token plain-text"}},[t._v("\n    ")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("对应的 Fiber树 结构：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200912103815.png",alt:""}})]),t._v(" "),a("blockquote",[a("p",[t._v("这里需要提一下，为什么父级指针叫 return 而不是 parent 或者 father？因为作为一个工作单元，return 指节点执行完 completeWork 后会返回的下一个节点。子 Fiber 节点以及兄弟节点完成工作后会返回其父级节点，所以用 return 指代父级节点。")])]),t._v(" "),a("h4",{attrs:{id:"作为静态的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为静态的数据结构"}},[t._v("#")]),t._v(" 作为静态的数据结构")]),t._v(" "),a("p",[t._v("作为一种静态的数据结构，保存了组件相关的信息：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fiber对应组件的类型 Function/Class/Host...")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tag"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// key属性")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 大部分情况同type，某些情况不同，比如FunctionComponent使用React.memo包裹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("elementType "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于 FunctionComponent，指函数本身，对于ClassComponent，指class，对于HostComponent，指DOM节点tagName")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Fiber对应的真实DOM节点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("stateNode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h4",{attrs:{id:"作为动态的工作单元"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作为动态的工作单元"}},[t._v("#")]),t._v(" 作为动态的工作单元")]),t._v(" "),a("p",[t._v("作为动态的工作单元，Fiber 中如下参数保存了本次更新相关的信息。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存本次更新造成的状态改变相关信息")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pendingProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" pendingProps"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedProps "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("updateQueue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("memoizedState "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dependencies "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mode "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" mode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 保存本次更新会造成的DOM操作")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("effectTag "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoEffect"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("nextEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastEffect "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("如下两个字段保存调度优先级相关信息。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调度优先级相关")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childLanes "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" NoLanes"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),a("p",[t._v("我们了解了 Fiber 是什么，知道 Fiber 节点可以保存对应的 DOM 节点。")]),t._v(" "),a("p",[t._v("相应的，Fiber 节点构成的 Fiber 树就对应 DOM树。")]),t._v(" "),a("p",[t._v("在更新 DOM 方面，就需要用到被称为 "),a("strong",[t._v("双缓存")]),t._v(" 的技术。")]),t._v(" "),a("h3",{attrs:{id:"什么是双缓存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是双缓存"}},[t._v("#")]),t._v(" 什么是双缓存")]),t._v(" "),a("p",[t._v("当我们用 canvas 绘制动画，每一帧会之前都会调用 "),a("code",[t._v("ctx.clearRect")]),t._v(" 清楚上一帧的画面。")]),t._v(" "),a("p",[t._v("如果当前帧画面计算量比较大，导致清楚上一帧画面到绘制当前帧画面之间有较长间隙，就会出现白屏。")]),t._v(" "),a("p",[t._v("为了解决这个问题，我们可以在内存中绘制当前帧动画，绘制完毕后直接用当前帧替换上一帧画面，由于省去了两帧替换件的计算时间，不会出现从白屏到出现画面的闪烁情况。")]),t._v(" "),a("p",[t._v("这种 "),a("strong",[t._v("在内存中构建并直接替换")]),t._v(" 的技术叫做双缓存。")]),t._v(" "),a("p",[t._v("React 使用双缓存来完成 Fiber 树的构建和替换：对应着 DOM 树的创建与更新。")]),t._v(" "),a("h3",{attrs:{id:"双缓存-fiber-树"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#双缓存-fiber-树"}},[t._v("#")]),t._v(" 双缓存 Fiber 树")]),t._v(" "),a("p",[t._v("在 React 中最多会同时存在两棵 Fiber 树。当前屏幕上显示内容对应的 Fiber 树被称为 current Fiber 树，正在内存中构建的 Fiber 树被称为 workInProgress Fiber 树。")]),t._v(" "),a("p",[t._v("current Fiber 树中的 Fiber 节点被称为 current fiber，workInProgress Fiber 树中的 Fiber 节点被称为 workInProgress fiber，它们通过 alternate 属性链接。")]),t._v(" "),a("p",[t._v("React 应用的根节点通过 current 指针在不同 Fiber 树的 rootFiber 间切换来实现 Fiber 树的切换。")]),t._v(" "),a("p",[t._v("当 workInProgress Fiber 树构建完成交给 Renderer 渲染在页面上后，应用根节点的 current 指针指向 workInProgress Fiber 树，此时 workInProgress Fiber 树就变为 current Fiber 树。")]),t._v(" "),a("p",[t._v("每次状态更新都会产生新的 workInProgress Fiber 树，通过 current 与 workInProgress 的替换，完成 DOM 更新。")]),t._v(" "),a("p",[t._v("接下来我们以具体例子讲解 mount时、update时的构建 / 替换流程。")]),t._v(" "),a("h3",{attrs:{id:"mount-时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mount-时"}},[t._v("#")]),t._v(" mount 时")]),t._v(" "),a("p",[t._v("考虑如下例子：")]),t._v(" "),a("div",{staticClass:"language-jsx extra-class"},[a("pre",{pre:!0,attrs:{class:"language-jsx"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("App")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" add"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("useState")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("onClick")]),a("span",{pre:!0,attrs:{class:"token script language-javascript"}},[a("span",{pre:!0,attrs:{class:"token script-punctuation punctuation"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nReactDOM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("render")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token tag"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("App")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("/>")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getElementById")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'root'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("ol",[a("li",[a("p",[t._v("首次执行 "),a("code",[t._v("ReactDOM.render")]),t._v(" 会创建 fiberRootNode（源码中叫 fiberRoot）和 rootFiber。其中 fiberRootNode 是整个应用的根节点，rootFiber 是当前 "),a("code",[t._v("<App/>")]),t._v(" 所在组件树的根节点。")]),t._v(" "),a("p",[t._v("之所以要区分 fiberRootNode 和 rootFiber，是因为在应用中我们可以多次调用 "),a("code",[t._v("ReactDOM.render")]),t._v(" 渲染不同的组件树，他们会拥有不同的 rootFiber。但是整个应用的根节点只有一个，那就是 fiberRootNode。")]),t._v(" "),a("p",[t._v("fiberRootNode 的 current 会指向当前页面上已渲染内容对应的 Fiber树，即 current Fiber 树。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200912111151.png",alt:""}})]),t._v(" "),a("p",[t._v("由于是首屏渲染，页面中还没有挂在任何 DOM，所以 "),a("code",[t._v("fiberRootNode.current")]),t._v(" 指向的 rootFiber 没有任何子 Fiber 节点（即 current Fiber 树为空）。")])]),t._v(" "),a("li",[a("p",[t._v("接下来进入 render 阶段，根据组件返回的 JSX 在内存中一次创建 Fiber 节点并连接在一起构建 Fiber 树，被称为 workInProgress Fiber 树。（下图中右侧为内存中构建的树，左侧为页面显示的树）。")]),t._v(" "),a("p",[t._v("在构建 workInProgress Fiber 树时会尝试服用 current Fiber 树中已有的 Fiber 节点内的属性，在首屏渲染时只有 rootFiber 存在对应的 current fiber（即 "),a("code",[t._v("rootFiber.alternate")]),t._v("）。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200912111513.png",alt:""}})])]),t._v(" "),a("li",[a("p",[t._v("图中右侧已构建完的 workInProgress Fiber 树在 commit 阶段渲染到页面。")]),t._v(" "),a("p",[t._v("此时 DOM 更新为右侧树对应的样子，fiberRootNode 的 current 指针指向 workInProgress Fiber 树使其变为 current Fiber 树。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20201111170550.png",alt:""}})])])]),t._v(" "),a("h3",{attrs:{id:"update-时"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#update-时"}},[t._v("#")]),t._v(" update 时")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("当我们出发状态改变时，这会开启一次新的 render 阶段，并构建一棵新的 workInProgress Fiber 树。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20200912115805.png",alt:""}})]),t._v(" "),a("p",[t._v("和 mount 时一样，workInProgress Fiber 的创建可以复用 current Fiber 对应的节点数据。")]),t._v(" "),a("blockquote",[a("p",[t._v("这个决定是否复用的过程就是 diff 算法。")])])]),t._v(" "),a("li",[a("p",[t._v("workInProgress Fiber 树在 render 阶段完成构建后进入 commit 阶段渲染到页面上。渲染完毕后，workInProgress Fiber 树变为 current Fiber 树。")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://raw.githubusercontent.com/LaamGinghong/pics/master/img/20201111170620.png",alt:""}})])])}),[],!1,null,null,null);s.default=e.exports}}]);