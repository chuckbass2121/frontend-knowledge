(window.webpackJsonp=window.webpackJsonp||[]).push([[162],{353:function(t,a,s){"use strict";s.r(a);var n=s(6),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("ul",[s("li",[t._v("原文链接： "),s("a",{attrs:{href:"https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular Change Detection Explained"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("原文作者： Pascal Precht")]),t._v(" "),s("li",[t._v("译者: 嘉文")])])]),t._v(" "),s("h1",{attrs:{id:"目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录"}},[t._v("#")]),t._v(" 目录")]),t._v(" "),s("ul",[s("li",[t._v("什么是变更检查（Change Dectetion）？")]),t._v(" "),s("li",[t._v("什么引起了变更（change）？")]),t._v(" "),s("li",[t._v("发生变更后谁通知 Angular？")]),t._v(" "),s("li",[t._v("变更检查")]),t._v(" "),s("li",[t._v("性能")]),t._v(" "),s("li",[t._v("更聪明的变更检查")]),t._v(" "),s("li",[t._v("不变对象（Immutable Objects）")]),t._v(" "),s("li",[t._v("减少检测次数（number of checks）")]),t._v(" "),s("li",[t._v("Observable")]),t._v(" "),s("li",[t._v("更多")])]),t._v(" "),s("h1",{attrs:{id:"什么是变更检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是变更检查"}},[t._v("#")]),t._v(" 什么是变更检查")]),t._v(" "),s("p",[t._v("变更检测的基本任务是 "),s("strong",[t._v("获取程序内部状态并使之在用户界面可见")]),t._v("。这个 "),s("strong",[t._v("状态")]),t._v(" 可以是任何对象、数组、基本数据类型，也就是说可以是任意 JavaScript 数据结构。")]),t._v(" "),s("p",[t._v("这个 "),s("strong",[t._v("状态")]),t._v(" 在用户界面上最终可能成为段落、表格、链接或者按钮，并且特别对于 web 而言，会成为 DOM。所以基本上我们将数据结构作为输入，并生成 DOM 作为输出并展示给用户。我们把这一过程称之为 "),s("strong",[t._v("rendering（渲染）")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/17/8149181683996a0bd363a91d92844c43?imageslim",alt:"img"}})]),t._v(" "),s("p",[t._v("然而，当变更发生在 runtime 的时候，它会变得很奇怪。比如当 DOM 已经渲染完成以后，我们要如何知道 model 中什么发生了改变，以及更新 DOM 的什么位置？访问 DOM 树是十分耗时的，所以我们不仅要找到应该更新 DOM 的位置，并且尽可能地少访问它。")]),t._v(" "),s("p",[t._v("这个问题有许多解决方案，比如其中一个方法是简单地通过发送 http 请求并重新渲染整个页面，另一个方案是 React 提出的 Virtual DOM 的概念，即检测 DOM 的新状态与旧状态的不同并渲染其不同的地方。")]),t._v(" "),s("p",[t._v("Tero 写了一篇很棒的文章，是关于 "),s("a",{attrs:{href:"http://teropa.info/blog/2015/03/02/change-and-its-detection-in-javascript-frameworks.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Change and its detection in JavaScript frameworks"),s("OutboundLink")],1),t._v("，即不同 JavaScript 框架之间的变更检测，如果你对于这个问题感兴趣的话我建议你们去看一看。在这篇文章中我会专注于 Angular>=2.x 的版本。")]),t._v(" "),s("h1",{attrs:{id:"什么引起了变更"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么引起了变更"}},[t._v("#")]),t._v(" 什么引起了变更？")]),t._v(" "),s("p",[t._v("既然我们知道了变更检查是什么，我们可能会疑惑：到底这样的变更什么时候会发生？Angular 什么时候知道它必须更新视图？下面给一个例子：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n    <h1>{{firstname}} {{lastname}}</h1>\n    <button (click)="changeName()">Change name</button>\n  ')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppComponent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  firstname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Pascal'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  lastname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Precht'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("firstname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Brad'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lastname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Green'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("上面这个组件简单地展示了两个属性，并提供一个方法，在点击按钮的时候调用这个方法来改变这两个属性。这个按钮被点击的时候就是程序 "),s("strong",[t._v("状态")]),t._v(" 已经发生了改变的时候，因为它改变了这个组件的属性，所以我们需要在这个时候更新视图。")]),t._v(" "),s("p",[t._v("下面是另一个例子：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('\n\t\t<div *ngFor="let item of contacts">{{item}}</div>\n\t')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ContactsApp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OnInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  contacts"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Contact"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" http"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ngOnInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("http"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/contacts'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("map")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" res"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("json")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("contacts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("contacts "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" contacts"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("这个组件存储这一个联系人的列表，并且当它初始化的时候会发起一个 http 请求，一旦这个请求完成，就会更新联系人列表。在这个时候，我们的程序状态发生了改变，因此我们需要更新视图。")]),t._v(" "),s("p",[t._v("通过上面两个例子，我们可以发现程序发生改变有三个主要原因：")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("事件")]),t._v("：click、submit...")]),t._v(" "),s("li",[s("strong",[t._v("XHR")]),t._v("：从服务端获取数据")]),t._v(" "),s("li",[s("strong",[t._v("Timers")]),t._v("：setTimeout、setInterval")])]),t._v(" "),s("p",[t._v("这三个原因都有一个共同点，那便是它们都是异步事件。从中我们可以得出一个结论，基本上只要发生了异步操作，我们的程序状态就可能发生改变，"),s("strong",[t._v("这就是 Angular 需要更新视图的时候")]),t._v("。")]),t._v(" "),s("h1",{attrs:{id:"谁通知-angular"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#谁通知-angular"}},[t._v("#")]),t._v(" 谁通知 Angular")]),t._v(" "),s("p",[t._v("到目前为止，我们已经知道了是什么导致程序状态的改变，但在这个视图必须发生改变的时候，到底是谁通知 Angular？")]),t._v(" "),s("p",[t._v("如果有接触过 Angular 的应该知道这一切是 "),s("a",{attrs:{href:"https://blog.thoughtram.io/angular/2016/01/22/understanding-zones.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zone.js"),s("OutboundLink")],1),t._v(" 完成的。事实上，Angular 有着自己的 zone，叫 "),s("strong",[t._v("NgZone")]),t._v("。"),s("a",{attrs:{href:"https://blog.thoughtram.io/angular/2016/02/01/zones-in-angular-2.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zone.js in Angular"),s("OutboundLink")],1),t._v(" 是一篇关于 NgZone 的文章。")]),t._v(" "),s("p",[t._v("简单描述一下：Angular 源码中某一个东西叫做 ApplicationRef，它监听 NgZone 的 onTurnDone 事件。只要这个事件发生，它就执行 "),s("code",[t._v("tick()")]),t._v(" 函数，这个函数执行 "),s("strong",[t._v("变更检查")]),t._v("。")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 真实源码的非常简化版本。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ApplicationRef")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  changeDetectorRefs"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ChangeDetectorRef"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" zone"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" NgZone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("onTurnDone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("zone"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("tick")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("changeDetectorRefs"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" ref"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("detectChanges")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"变更检查"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变更检查"}},[t._v("#")]),t._v(" 变更检查")]),t._v(" "),s("p",[t._v("我们现在已经知道什么时候变更检测会被触发（triggered），但是它如何执行呢？")]),t._v(" "),s("p",[t._v("我们需要注意到的第一件事情是，在 Angular 中，"),s("strong",[t._v("每个组件都有它自己的变更检测器（change detector）")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/17/4fab6e8405764bae95e2bc0bd3096f14?imageslim",alt:"img"}})]),t._v(" "),s("p",[t._v("这是很明显的，因为这让我们可以单独控制每个组件的变更检查何时发生以及如何执行。")]),t._v(" "),s("p",[t._v("我们假设组件树某处发生了一个事件，此时由 zone 执行给定的 handler 并且在执行完成后通知 Angular，接着 Angular 执行变更检查。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/17/dd7592c43121bd5df44f9c4ae1973388?imageslim",alt:"img"}})]),t._v(" "),s("p",[t._v("既然每个组件都有自己的变更检查器，并且一个 Angular 应用包含着一个组件树，那么逻辑上我们也有一个 "),s("strong",[t._v("变更检测树（change detector tree）")]),t._v("。这棵树也可以被看成是一个有向图，该有向图的数据总是从顶端流向底端。")]),t._v(" "),s("p",[t._v("数据总是从顶端流向底端的原因在于，对于每一个组件，变更检测总是自顶向下执行，每次都是从根组件开始。单向的数据流相较于循环流动的数据更容易被预测，我们永远知道视图的数据从哪里来，因为它只能源于它所在的组件。")]),t._v(" "),s("p",[t._v("另一个有趣的观察是，在单通道中变更检查会更加稳定。这意味着如果当我们第一次运行完变更检测后，只要一个组件导致了任何的副作用，Angular 就会抛出一个错误。")]),t._v(" "),s("h1",{attrs:{id:"性能"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#性能"}},[t._v("#")]),t._v(" 性能")]),t._v(" "),s("p",[t._v("默认的，在事件发生的时候，即使我们每次都检测每个组件，Angular 仍然非常快，它会在几毫秒内执行成千上万次的检测，这主要是因为 Angular 生成了对虚拟机友好的代码。")]),t._v(" "),s("p",[t._v("这是什么意思？实际上，当我们说每个组件都有自己的变更检测器的时候，并不是真的说在 Angular 有这样一个普遍的东西负责每一个组件的变更检测。")]),t._v(" "),s("p",[t._v("这样做的原因在于，变更检测器必须被编写成动态的，这样它才能够检测所有的组件，不管这个组件的模型结构是怎样的。而 VMs 不喜欢这种动态的代码，因为它们不能优化这些动态的代码。当一个对象不总是相同的时候，它通常被称作多态的。")]),t._v(" "),s("p",[t._v("Angular 对于每个组件都在 runtime 生成变更检测器类，而这些变更检测器类是单态，因为它们确切地知道每个组件的模型是怎样的，VMs 可以完美地优化这些代码，从而使它执行速度变得非常快。")]),t._v(" "),s("h1",{attrs:{id:"更聪明的变更检测"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#更聪明的变更检测"}},[t._v("#")]),t._v(" 更聪明的变更检测")]),t._v(" "),s("p",[t._v("我们知道，一旦事件发生，Angular 必须每次都检测所有组件，因为应用的状态可能发生了改变。但是如果我们让 Angular 仅对应用中 "),s("strong",[t._v("状态发生改变的那部分")]),t._v(" 执行变更检测，性能可以变得更加出色。")]),t._v(" "),s("p",[t._v("是的，我们可以做到，只要通过下面几种数据结构：")]),t._v(" "),s("ul",[s("li",[t._v("Immutable")]),t._v(" "),s("li",[t._v("Observable")])]),t._v(" "),s("p",[t._v("如果我们恰好使用了这些数据结构，并且告诉了 Angular，那么变更检查就会快很多。")]),t._v(" "),s("h2",{attrs:{id:"理解易变性-mutability"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#理解易变性-mutability"}},[t._v("#")]),t._v(" 理解易变性（Mutability）")]),t._v(" "),s("p",[t._v("为了理解不可变的数据结构（immutable data structures）为什么、以及如何有助于更快的变更检查，我们需要理解易变性到底是什么。举个例子：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'<v-card [vData]=\"vData\"></v-card>'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CardComponent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vData "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Christoph Burgdorf'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    email"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'christoph@thoughtram.io'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("changeData")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Pascal Precht'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])]),s("p",[t._v("CardComponent 使用了 v-card 作为子组件，该子组件有一个输入属性 vData，我们将 CardComponent 属性中的 vData 传入子组件。vData 是一个包含两个字段的对象。另外，在组件中还有一个方法 changeData，这个方法改变 vData 中的 name 字段。")]),t._v(" "),s("p",[t._v("这里的重要部分在于 changeData 通过改变 vData 的 name 属性改变了 vData，但是 "),s("strong",[t._v("对象的引用并没有被改变")]),t._v("。")]),t._v(" "),s("p",[t._v("假设一些事件触发了 changeData，变更检测会怎样执行？首先，"),s("code",[t._v("vData.name")]),t._v(" 被改变，然后它被传入了子组件 v-card。v-card 的变更检查器开始检查传进来的 vData 是否未发生改变，引用未改变所以，但是它的 name 字段发生了改变，所以 Angular 仍然会对这个对象执行变更检查。")]),t._v(" "),s("p",[t._v("由于 JavaScript 中的对象默认是易变的，每次触发事件执行的时候，Angular 都必须保守地对每个组件跑一次变更检查。")]),t._v(" "),s("h2",{attrs:{id:"不可变对象-immutable-object"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不可变对象-immutable-object"}},[t._v("#")]),t._v(" 不可变对象（Immutable Object）")]),t._v(" "),s("p",[t._v("这种情况下，不可变对象就有发挥的空间。")]),t._v(" "),s("p",[t._v("不可变对象保证了这个对象是不可变的，这意味着如果我们使用者不可变对象，同时试图改变这个对象，那我们总是会得到一个新的引用，因为原来那个对象是不可变的。")]),t._v(" "),s("h2",{attrs:{id:"减少检测次数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#减少检测次数"}},[t._v("#")]),t._v(" 减少检测次数")]),t._v(" "),s("p",[t._v("当输入属性没有发生改变的时候，Angular 会跳过整棵子树的变更检查。我们刚刚说了，"),s("strong",[t._v("改变")]),t._v(" 意味着新的引用，如果我们在 Angular 程序中使用不可变对象，我们只需要做的就是告诉 Angular，如果输入内容没有发生改变，这个组件就可以跳过检测。")]),t._v(" "),s("p",[t._v("我们通过研究 v-card 来看看它是如何工作的：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\n    <h2>{{vData.name}}</h2>\n    <span>{{vData.email}}</span>\n  ")]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  changeDetection"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ChangeDetectionStrategy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OnPush\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("VCardCmp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" vData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("我们可以看到组件只取决于输入属性，如果输入属性没有发生改变，我们可以让 Angular 跳过对于这棵子树的变更检测，我们只需要设置变更检测策略为 "),s("strong",[t._v("OnPush")]),t._v(" 即可。")]),t._v(" "),s("p",[t._v("这就大功告成了，试想一下一棵很大的组件树，只要我们使用了不可变对象，就可以跳过整棵子树的变更检查。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/17/3c0931a9c1d74a1e7a151df55f229da1?imageslim",alt:"img"}})]),t._v(" "),s("h2",{attrs:{id:"observable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable"}},[t._v("#")]),t._v(" Observable")]),t._v(" "),s("p",[t._v("正如前文所说，当变更发生的时候，Observable 也给了我们一个保证。不想不可变数据，当变更发生的时候，Observable 不提供给我们新的引用，取而代之的是，它们触发事件，并且让我们注册监听（Subscribe），对事件作出处理。")]),t._v(" "),s("p",[t._v("所以，如果我们使用 Observable，并且想要使用 OnPush 来跳过对子树的变更检查时，但是这些对象的引用永远都不会发生变化，怎么办？")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[t._v("@"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Component")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'{{counter}}'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  changeDetection"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ChangeDetectionStrategy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("OnPush\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CartBadgeCmp")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  @"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Input")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" addItemStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("Observable"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("any")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  counter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ngOnInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addItemStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 程序状态改变")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("假设我们在写一个有购物车的网上商城，用户将商品放入购物车时，我们希望有一个小计时器出现在我们页面，这样一来用户可以知道购物车中的商品数目。")]),t._v(" "),s("p",[t._v("CartBadgeCmp 就是做这样一件事，它有一个 counter 作为输入属性，这个 counter 是一个事件流，它会在某个商品被加入购车车时被 fired。")]),t._v(" "),s("p",[t._v("除此之外，我们将变更策略设置为 OnPush，因此只有输入属性发生改变时才会执行变更检查。")]),t._v(" "),s("p",[t._v("如前文所说，addItemStream 永远不会发生改变，所以变更检测永远不会在这个子树中发生。但是这不符合我们的需求，我们希望的是当 addItemStream 被触发的时候，组件仍然可以执行变更检查。")]),t._v(" "),s("p",[t._v("Angular 考虑到了这一点，如前文所述，变更总是自顶向下，那么我们需要的只是一个探测（detect）"),s("strong",[t._v("自根组件到变更发生的那个组件")]),t._v(" 的整条路径而已，Angular 无法知道，但是我们知道，所以我们可以手动告诉 Angular 应该在何时何地执行变更检测。")]),t._v(" "),s("p",[t._v("我们可以通过依赖注入一个组件的 ChangeDetectorRef，通过它的一个 maskForCheck API，标记了一条当前组件到根组件的路径，当下一次变更检测发生的时候，就会检测到它们，Angular 就知道从这个组件到根组件这一路径上的组件都需要被检查：")]),t._v(" "),s("div",{staticClass:"language-typescript extra-class"},[s("pre",{pre:!0,attrs:{class:"language-typescript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AppComponent")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("constructor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" cd"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" ChangeDetectorRef"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("ngOnInit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("addItemStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("subscribe")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("counter"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// application state changed")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cd"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("markForCheck")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// marks path")]),t._v("\n      "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("下图就是当 observable 事件发生之后的组件树样子：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/17/18ba93496c237cf1928efe1deffba1c4?imageslim",alt:"img"}})]),t._v(" "),s("p",[t._v("当变更检测执行的时候：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2017/10/17/a17449e82c5a08e3bcbe3f16025516d3?imageslim",alt:"img"}})]),t._v(" "),s("p",[t._v("一旦变更检测结束，它就会恢复回 OnPush 模式。")])])}),[],!1,null,null,null);a.default=e.exports}}]);