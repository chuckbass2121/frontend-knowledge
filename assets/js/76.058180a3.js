(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{278:function(t,s,n){"use strict";n.r(s);var a=n(6),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"一个例子来认识闭包是什么-为什么需要它"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一个例子来认识闭包是什么-为什么需要它"}},[t._v("#")]),t._v(" 一个例子来认识闭包是什么，为什么需要它")]),t._v(" "),n("p",[t._v("假设有一个需求，需要在页面上显示一个浏览时间，从打开页面的瞬间开始计时，每过一秒加一。")]),t._v(" "),n("p",[t._v("本质上说，这个业务就是一个累加器，每过一秒自增一次。")]),t._v(" "),n("p",[t._v("首先最简单的 "),n("strong",[t._v("「每隔一秒加一」")]),t._v(" ，我们立刻想到的是使用计时器，每隔一秒调用一起累加器函数：")]),t._v(" "),n("div",{staticClass:"language-js extra-class"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" second "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("counter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  second"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("setInterval")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用累加器")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("counter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),n("p",[t._v("可以看到我们已经实现了所需要的功能， 这也是 "),n("strong",[t._v("最低级")]),t._v(" 的实现方法。")]),t._v(" "),n("p",[t._v("为什么说是 "),n("strong",[t._v("最低级呢")]),t._v(" ，因为我们实现功能的思路是定义一个 "),n("strong",[t._v("全局变量")]),t._v(" ，每次累加都是在更新这个全局变量。而软件开发中有一条不成文的规定就是： "),n("strong",[t._v("尽可能少定义全局变量")]),t._v(" 。")]),t._v(" "),n("p",[t._v("大致有两个原因：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("难以控制")]),t._v(" ：可以在任何地方进行读写，意味着可能会被不相干的函数改写；")]),t._v(" "),n("li",[n("strong",[t._v("占用内存")]),t._v(" ：全局变量占用内存的生命周期长。一般局部变量在函数调用完毕之后都会被垃圾回收器回收释放；而全局变量因为可以在任何地方进行读写，因此垃圾回收器很难做出是否应该释放全局变量的判断，因此全局变量会一直占用内存。")])]),t._v(" "),n("p",[t._v("综上所述，我们接下来要做的工作就是实现功能的同时， "),n("strong",[t._v("避免定义全局变量污染环境")]),t._v(" 。")])])}),[],!1,null,null,null);s.default=r.exports}}]);